{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["alphabet","ChangingLetters","state","changingLetters","paused","changeLetters","newLetters","i","newLetter","Math","floor","random","length","push","_this","setState","concat","handleKeyDown","e","keyCode","idI","setInterval","clearInterval","this","document","addEventListener","index","showLetters","map","letter","react_default","a","createElement","key","className","toUpperCase","onKeyUp","handleKeyUp","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAIMA,SAAW,iCAiEFC,6MA7DbC,MAAO,CACHC,gBAAiB,GACjBC,QAAQ,KAIZC,cAAgB,WAEZ,IADA,IAAIC,EAAa,GACRC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,IAAMC,EAAYR,EAASS,KAAKC,MAAMD,KAAKE,SAAWX,EAASY,SAC/DN,EAAWO,KAAKL,GAGxBM,EAAKC,SAAS,CACVZ,gBAAe,GAAAa,OAAMV,QAiBzBW,cAAgB,SAACC,GACI,KAAdA,EAAEC,SAAmBL,EAAKZ,MAAME,OAKX,KAAdc,EAAEC,SAAkBL,EAAKZ,MAAME,SACrCU,EAAKM,IAAMC,YAAYP,EAAKT,cAAe,IAC3CS,EAAKC,SAAS,CACVX,QAAQ,MAPZkB,cAAcR,EAAKM,KACnBN,EAAKC,SAAS,CACVX,QAAQ,yFAfhBmB,KAAKH,IAAMC,YAAYE,KAAKlB,cAAe,mDAI3CiB,cAAcC,KAAKH,kDAInBI,SAASC,iBAAiB,UAAWF,KAAKN,gDAmBxC,IAAIS,EAAQ,EACNC,EAAcJ,KAAKrB,MAAMC,gBAAgByB,IAAI,SAAAC,GAEjD,OADAH,IACOI,EAAAC,EAAAC,cAAA,OAAKC,IAAKP,EAAOQ,UAAU,WAAWL,EAAOM,iBAGxD,OACIL,EAAAC,EAAAC,cAAA,OAAKI,QAASb,KAAKc,YAAaH,UAAU,aACvCP,UAzDiBW,IAAMC,WCMhBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASvB,SAASwB,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cb03a316.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nconst alphabet = \"abcdefghijklmnopqrstuvwxyz ,.\";\n\nclass ChangingLetters extends React.Component {\n    \n  state= {\n      changingLetters: [],\n      paused: false\n  }\n\n\n  changeLetters = () => {\n      var newLetters = [];\n      for (var i = 0; i < 640; i++) { \n          const newLetter = alphabet[Math.floor(Math.random() * alphabet.length)];\n          newLetters.push(newLetter);\n      }\n\n  this.setState({\n      changingLetters: [...newLetters]\n  })\n  }\n\n\n  componentDidMount() {\n      this.idI = setInterval(this.changeLetters, 50)\n  }\n\n  componentWillUnmount() {\n      clearInterval(this.idI)\n  }\n\n  componentDidUpdate() {\n      document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  handleKeyDown = (e) => {\n      if(e.keyCode === 32 && !this.state.paused) {\n          clearInterval(this.idI)\n          this.setState({\n              paused: true\n          })\n      }else if (e.keyCode === 32 && this.state.paused) {\n          this.idI = setInterval(this.changeLetters, 50)\n          this.setState({\n              paused: false\n          })\n      }\n  }\n\n  \n  render() {\n        var index = 0;\n        const showLetters = this.state.changingLetters.map(letter => {\n          index++;\n          return <div key={index} className=\"letters\">{letter.toUpperCase()}</div>\n         })\n\n      return (\n          <div onKeyUp={this.handleKeyUp} className=\"container\">\n            {showLetters}\n          </div>\n      )\n  }\n}\n\nexport default ChangingLetters;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}